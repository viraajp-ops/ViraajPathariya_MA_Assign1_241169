class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; ++i){
            map.putIfAbsent(nums[i], 0);
            map.put(nums[i], map.get(nums[i])+1);
        }
        List<List<Integer>> list = new ArrayList<>();
        if(map.containsKey(0) && map.get(0)>2){
            list.add(Arrays.asList(0,0,0));
        }
        int[] key= new int[map.keySet().size()];
        int j=0;
        for(int i: map.keySet()){
            key[j++]=i;
            if(i!=0 && map.get(i)>1 && map.containsKey((-2)*i)){
                list.add(Arrays.asList(i, i, ((-2)*i)));
            }
        }
        Arrays.sort(key);
        for(int i=0; i<key.length-2; ++i){
            for(int k=i+1; k<key.length-1; ++k){
                if(-key[i]-key[k]>key[k] && map.containsKey(-key[i]-key[k])){
                    list.add(Arrays.asList(key[i], key[k], -key[i]-key[k]));
                }
            }
        }
        return list;
    }
}
